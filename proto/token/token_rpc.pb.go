// Code generated by protoc-gen-go. DO NOT EDIT.
// source: token_rpc.proto

package token

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// message 对应生成代码的 struct
type TokenRequest struct {
	Token                []string `protobuf:"bytes,1,rep,name=token,proto3" json:"token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenRequest) Reset()         { *m = TokenRequest{} }
func (m *TokenRequest) String() string { return proto.CompactTextString(m) }
func (*TokenRequest) ProtoMessage()    {}
func (*TokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_647c9577c1f98294, []int{0}
}

func (m *TokenRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenRequest.Unmarshal(m, b)
}
func (m *TokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenRequest.Marshal(b, m, deterministic)
}
func (m *TokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenRequest.Merge(m, src)
}
func (m *TokenRequest) XXX_Size() int {
	return xxx_messageInfo_TokenRequest.Size(m)
}
func (m *TokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_TokenRequest proto.InternalMessageInfo

func (m *TokenRequest) GetToken() []string {
	if m != nil {
		return m.Token
	}
	return nil
}

type TokenResponse struct {
	RetCode              int32    `protobuf:"varint,1,opt,name=ret_code,json=retCode,proto3" json:"ret_code,omitempty"`
	UserId               uint64   `protobuf:"varint,2,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	BindToken            string   `protobuf:"bytes,3,opt,name=bind_token,json=bindToken,proto3" json:"bind_token,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_647c9577c1f98294, []int{1}
}

func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_TokenResponse.Unmarshal(m, b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return xxx_messageInfo_TokenResponse.Size(m)
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetRetCode() int32 {
	if m != nil {
		return m.RetCode
	}
	return 0
}

func (m *TokenResponse) GetUserId() uint64 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *TokenResponse) GetBindToken() string {
	if m != nil {
		return m.BindToken
	}
	return ""
}

func init() {
	proto.RegisterType((*TokenRequest)(nil), "token.TokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "token.TokenResponse")
}

func init() { proto.RegisterFile("token_rpc.proto", fileDescriptor_647c9577c1f98294) }

var fileDescriptor_647c9577c1f98294 = []byte{
	// 200 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x8f, 0x31, 0x6b, 0xc3, 0x30,
	0x10, 0x85, 0xab, 0xba, 0xb6, 0xeb, 0xa3, 0xa6, 0xa0, 0x1a, 0xea, 0x16, 0x0a, 0xc2, 0x74, 0xd0,
	0xe4, 0xa1, 0x5d, 0xb3, 0x65, 0x32, 0x64, 0x92, 0xb3, 0x0b, 0x6c, 0x5d, 0xc0, 0x04, 0x24, 0x47,
	0x92, 0xf3, 0xfb, 0x83, 0x65, 0x0d, 0xc9, 0x76, 0xf7, 0xde, 0xbb, 0xc7, 0x77, 0xf0, 0xee, 0xcd,
	0x19, 0xb5, 0xb4, 0xf3, 0xd8, 0xce, 0xd6, 0x78, 0x43, 0xd3, 0x20, 0x34, 0xbf, 0xf0, 0x76, 0x5c,
	0x07, 0x81, 0x97, 0x05, 0x9d, 0xa7, 0x15, 0x6c, 0x46, 0x4d, 0x58, 0xc2, 0x0b, 0x11, 0x53, 0x03,
	0x94, 0x31, 0xe5, 0x66, 0xa3, 0x1d, 0xd2, 0x2f, 0x78, 0xb5, 0xe8, 0xe5, 0x68, 0x14, 0xd6, 0x84,
	0x11, 0x9e, 0x8a, 0xdc, 0xa2, 0xdf, 0x1b, 0x85, 0xf4, 0x13, 0xf2, 0xc5, 0xa1, 0x95, 0x93, 0xaa,
	0x9f, 0x19, 0xe1, 0x2f, 0x22, 0x5b, 0xd7, 0x4e, 0xd1, 0x1f, 0x80, 0x61, 0xd2, 0x4a, 0x6e, 0xfd,
	0x09, 0x23, 0xbc, 0x10, 0xc5, 0xaa, 0x84, 0xea, 0xbf, 0x43, 0x24, 0xe9, 0xd1, 0x5e, 0xa7, 0x11,
	0xe9, 0x0e, 0xca, 0x1e, 0xa3, 0xd9, 0xe9, 0x93, 0xa1, 0x1f, 0x6d, 0xb8, 0x6c, 0xef, 0x79, 0xbf,
	0xab, 0x47, 0x71, 0xc3, 0x6b, 0x9e, 0x86, 0x2c, 0x7c, 0xf9, 0x7f, 0x0b, 0x00, 0x00, 0xff, 0xff,
	0x26, 0x8c, 0x26, 0xdf, 0xf8, 0x00, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// TokenServiceClient is the client API for TokenService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type TokenServiceClient interface {
	// rpc 定义服务内的 SendTokenInfo 远程调用
	SendTokenInfo(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type tokenServiceClient struct {
	cc *grpc.ClientConn
}

func NewTokenServiceClient(cc *grpc.ClientConn) TokenServiceClient {
	return &tokenServiceClient{cc}
}

func (c *tokenServiceClient) SendTokenInfo(ctx context.Context, in *TokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/token.TokenService/SendTokenInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TokenServiceServer is the server API for TokenService service.
type TokenServiceServer interface {
	// rpc 定义服务内的 SendTokenInfo 远程调用
	SendTokenInfo(context.Context, *TokenRequest) (*TokenResponse, error)
}

// UnimplementedTokenServiceServer can be embedded to have forward compatible implementations.
type UnimplementedTokenServiceServer struct {
}

func (*UnimplementedTokenServiceServer) SendTokenInfo(ctx context.Context, req *TokenRequest) (*TokenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendTokenInfo not implemented")
}

func RegisterTokenServiceServer(s *grpc.Server, srv TokenServiceServer) {
	s.RegisterService(&_TokenService_serviceDesc, srv)
}

func _TokenService_SendTokenInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TokenServiceServer).SendTokenInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/token.TokenService/SendTokenInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TokenServiceServer).SendTokenInfo(ctx, req.(*TokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _TokenService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "token.TokenService",
	HandlerType: (*TokenServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SendTokenInfo",
			Handler:    _TokenService_SendTokenInfo_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "token_rpc.proto",
}
